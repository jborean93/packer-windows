---
- name: check that the mandatory variables have been set
  assert:
    that:
    - man_packer_setup_host_type is defined

- name: ensure Galaxy requirements have been downloaded
  command: ansible-galaxy install -r requirements.yml -p roles
  args:
    chdir: '{{ playbook_dir }}'
  tags:
  - skip_ansible_lint # should be idempotent but it's not the end of the world

- name: check that the host type specified is valid
  fail:
    msg: man_packer_setup_host_type {{ man_packer_setup_host_typei }} is not a valid host type, expecting {{ pri_packer_setup_host_config.keys() }}
  when: pri_packer_setup_host_config[man_packer_setup_host_type] is not defined

- name: verify that a non supported Hyper-V configuration isn't set
  fail:
    msg: man_packer_setup_host_type {{ man_packer_setup_host_type }} is not supported with the Hyper-V builder
  when: opt_packer_setup_builder == 'hyperv' and man_packer_setup_host_type in ["2008-x86", "2008-x64"]

- name: create the packer build folder for the packer files
  file:
    path: '{{ man_packer_setup_host_type }}'
    state: directory

- name: setup Packer config and json file
  include_tasks: packer_config.yml

- name: create the secondary ISO file used in the bootstrapping process
  include_tasks: secondary_iso.yml

- name: download and extract ISO's that end with .exe
  include_tasks: download_extract_iso.yml
  when: pri_packer_setup_config.iso_url.endswith('.exe') and opt_packer_setup_iso_path is not defined

- name: download Virtio ISO for VirtualBox build
  get_url:
    url: https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.171-1/virtio-win-0.1.171.iso
    dest: '{{ man_packer_setup_host_type }}/virtio.iso'
  when: opt_packer_setup_builder in ['virtualbox', 'qemu']

- name: create Hyper-V External Network switch
  block:
  - name: check if the swtch already exists
    shell: if (Get-VMSwitch -Name "{{ pri_packer_setup_builders.switch_name }}" -ErrorAction SilentlyContinue) { $true } else { $false }
    args:
      executable: powershell.exe
    changed_when: False
    register: pri_packer_setup_hyper_switch_res

  - name: create Hyper-V switch
    shell: $name = (Get-NetAdapter | ?{ $_.Name -like "Ethernet*" })[0].Name; New-VMSwitch -Name "{{ pri_packer_setup_builders.switch_name }}" -AllowManagementOS $true -NetAdapterName $name -Notes "Used by packer-windoze"
    args:
      executable: powershell.exe
    when: not pri_packer_setup_hyper_switch_res.stdout_lines[0]|bool
  when: opt_packer_setup_builder == 'hyperv'

- name: template out the Ansible host file required during provisioning
  template:
    dest: '{{ man_packer_setup_host_type }}/hosts.ini'
    src: hosts.ini.j2
  vars:
    pri_packer_setup_ansible_port: '{{ (opt_packer_setup_builder == "virtualbox")|ternary(pri_packer_setup_config.vb_forwarded_port, 5985) }}'

- name: template out the Vagrantfile template
  template:
    dest: '{{ man_packer_setup_host_type }}/vagrantfile.template'
    src: vagrantfile.template.j2

- name: copy the Hyper-V get IP script
  copy:
    dest: '{{ man_packer_setup_host_type }}/configure-hyperv-network.ps1'
    src: configure-hyperv-network.ps1
  when: opt_packer_setup_builder == 'hyperv'

# this isn't strictly used in the Packer process but does test out the
# description templater when we don't want to upload the box
- name: template out the description for the box
  template:
    dest: '{{ man_packer_setup_host_type }}/description.md'
    src: description.md.j2

- name: generate the main CHANGELOG.md
  template:
    dest: CHANGELOG.md
    src: CHANGELOG.md.j2

- name: show user how to run packer build after this completes
  debug:
    msg: Now that the packer files have been set up, run "packer build -force {{ man_packer_setup_host_type }}/packer.json" to build the packer image
